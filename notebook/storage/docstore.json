{"docstore/metadata": {"d6d5794a-eea5-4d9d-ac88-379c4fb458a4": {"doc_hash": "f7f6ba0beb1af4c6c6c9c61995c80da193aceafb5b54290cf1235705b5cc4e20"}, "8b07b83a-64bf-4415-b5ea-a3d7a8367430": {"doc_hash": "aedec9429af774816b35b8880392cc6a237618e377ce41d629b573ea97ea8cec", "ref_doc_id": "d6d5794a-eea5-4d9d-ac88-379c4fb458a4"}, "ae651d15-59cb-4c3a-9256-a96668355e72": {"doc_hash": "7cbeae596474d6fed982990ab1d6ecb039102b355f353a49b991852af68a7b8d", "ref_doc_id": "d6d5794a-eea5-4d9d-ac88-379c4fb458a4"}}, "docstore/data": {"8b07b83a-64bf-4415-b5ea-a3d7a8367430": {"__data__": {"id_": "8b07b83a-64bf-4415-b5ea-a3d7a8367430", "embedding": null, "metadata": {"file_path": "c:\\Users\\DELL\\qasystem\\notebook\\..\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 4634, "creation_date": "2025-06-22", "last_modified_date": "2025-06-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6d5794a-eea5-4d9d-ac88-379c4fb458a4", "node_type": "4", "metadata": {"file_path": "c:\\Users\\DELL\\qasystem\\notebook\\..\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 4634, "creation_date": "2025-06-22", "last_modified_date": "2025-06-22"}, "hash": "f7f6ba0beb1af4c6c6c9c61995c80da193aceafb5b54290cf1235705b5cc4e20", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae651d15-59cb-4c3a-9256-a96668355e72", "node_type": "1", "metadata": {}, "hash": "401c56f3fb8d9fbb71762dfa5d810e55aa4d9030cac7fc20732775d9b01c973f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "=============================\r\nBASICS OF MACHINE LEARNING\r\n=============================\r\n\r\n**Definition:**\r\nMachine Learning (ML) is a subset of Artificial Intelligence (AI) that enables systems to learn from data and improve their performance without being explicitly programmed.\r\n\r\n**Types of ML:**\r\n1. Supervised Learning:\r\n   - Learns from labeled data (input-output pairs)\r\n   - Algorithms: Linear Regression, Logistic Regression, Decision Trees, SVM, k-NN, Random Forest, XGBoost\r\n   - Applications: Spam detection, disease prediction, stock price forecasting\r\n\r\n2. Unsupervised Learning:\r\n   - Learns from unlabeled data\r\n   - Algorithms: K-Means Clustering, Hierarchical Clustering, PCA, Autoencoders\r\n   - Applications: Customer segmentation, anomaly detection\r\n\r\n3. Semi-Supervised Learning:\r\n   - Uses a small amount of labeled data with a large amount of unlabeled data\r\n   - Used when labeling is expensive or time-consuming\r\n\r\n4. Reinforcement Learning:\r\n   - Learns through trial and error using rewards and punishments\r\n   - Key Concepts: Agent, Environment, Actions, Rewards\r\n   - Algorithms: Q-learning, Deep Q Networks (DQN), Policy Gradient\r\n\r\n=============================\r\nCOMMON ALGORITHMS\r\n=============================\r\n\r\n**Linear Regression:**\r\n- Predicts continuous values based on linear relationship.\r\n- Example: Predicting house prices.\r\n\r\n**Logistic Regression:**\r\n- Used for binary classification.\r\n- Outputs probability of belonging to a class.\r\n\r\n**Decision Tree:**\r\n- Tree-like model for decision making.\r\n- Easy to interpret but prone to overfitting.\r\n\r\n**Random Forest:**\r\n- Ensemble of Decision Trees.\r\n- Reduces overfitting, improves accuracy.\r\n\r\n**Support Vector Machine (SVM):**\r\n- Finds optimal boundary (hyperplane) between classes.\r\n- Works well on high-dimensional data.\r\n\r\n**k-Nearest Neighbors (k-NN):**\r\n- Classifies based on majority vote of nearest neighbors.\r\n- Simple and effective but slow with large datasets.\r\n\r\n**XGBoost:**\r\n- Optimized gradient boosting.\r\n- Extremely fast and accurate for structured/tabular data.\r\n\r\n**K-Means Clustering:**\r\n- Unsupervised learning algorithm that groups data into k clusters.\r\n\r\n**Principal Component Analysis (PCA):**\r\n- Dimensionality reduction technique.\r\n- Projects data into lower dimensions while retaining variance.\r\n\r\n=============================\r\nKEY ML CONCEPTS\r\n=============================\r\n\r\n**Overfitting vs Underfitting:**\r\n- Overfitting: Model performs well on training data but poorly on unseen data.\r\n- Underfitting: Model fails to capture underlying patterns.\r\n\r\n**Bias-Variance Tradeoff:**\r\n- Bias: Error from wrong assumptions.\r\n- Variance: Error from sensitivity to small fluctuations in training data.\r\n- Ideal model has balanced bias and variance.\r\n\r\n**Cross-Validation:**\r\n- Splitting dataset into multiple folds to validate model performance.\r\n- Common method: k-fold cross-validation\r\n\r\n**Evaluation Metrics:**\r\n- Classification: Accuracy, Precision, Recall, F1-Score, ROC-AUC\r\n- Regression: MSE, RMSE, MAE, R\u00b2 Score\r\n\r\n=============================\r\nDATA PREPROCESSING\r\n=============================\r\n\r\n**Common Steps:**\r\n- Handling Missing Values (mean imputation, deletion, etc.)\r\n- Encoding Categorical Variables (One-Hot, Label Encoding)\r\n- Feature Scaling (Standardization, Normalization)\r\n- Train-Test Split (commonly 80/20 or 70/30)\r\n\r\n=============================\r\nMODEL DEPLOYMENT\r\n=============================\r\n\r\n**Steps:**\r\n1. Train model using ML pipeline.\r\n2. Serialize model using Pickle or Joblib.\r\n3. Create REST API (e.g., using Flask or FastAPI).\r\n4.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3593, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ae651d15-59cb-4c3a-9256-a96668355e72": {"__data__": {"id_": "ae651d15-59cb-4c3a-9256-a96668355e72", "embedding": null, "metadata": {"file_path": "c:\\Users\\DELL\\qasystem\\notebook\\..\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 4634, "creation_date": "2025-06-22", "last_modified_date": "2025-06-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6d5794a-eea5-4d9d-ac88-379c4fb458a4", "node_type": "4", "metadata": {"file_path": "c:\\Users\\DELL\\qasystem\\notebook\\..\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 4634, "creation_date": "2025-06-22", "last_modified_date": "2025-06-22"}, "hash": "f7f6ba0beb1af4c6c6c9c61995c80da193aceafb5b54290cf1235705b5cc4e20", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b07b83a-64bf-4415-b5ea-a3d7a8367430", "node_type": "1", "metadata": {"file_path": "c:\\Users\\DELL\\qasystem\\notebook\\..\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 4634, "creation_date": "2025-06-22", "last_modified_date": "2025-06-22"}, "hash": "aedec9429af774816b35b8880392cc6a237618e377ce41d629b573ea97ea8cec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3. Create REST API (e.g., using Flask or FastAPI).\r\n4. Host model (e.g., on AWS, Heroku, Azure).\r\n5. Monitor performance and retrain as needed.\r\n\r\n=============================\r\nUSEFUL LIBRARIES\r\n=============================\r\n\r\n- Scikit-Learn: General-purpose ML\r\n- Pandas: Data manipulation\r\n- NumPy: Numerical operations\r\n- Matplotlib / Seaborn: Visualization\r\n- TensorFlow / PyTorch: Deep learning\r\n- XGBoost / LightGBM: Gradient boosting\r\n\r\n=============================\r\nEXAMPLE ML WORKFLOW\r\n=============================\r\n\r\n1. Problem definition\r\n2. Data collection\r\n3. Data cleaning\r\n4. Exploratory Data Analysis (EDA)\r\n5. Feature engineering\r\n6. Model selection\r\n7. Model training\r\n8. Hyperparameter tuning\r\n9. Evaluation\r\n10. Deployment\r\n11. Monitoring\r\n\r\n=============================\r\nGLOSSARY\r\n=============================\r\n\r\n- Feature: An individual measurable property\r\n- Label: The output we are trying to predict\r\n- Epoch: One full pass through the training data\r\n- Learning Rate: Step size during optimization\r\n- Gradient Descent: Optimization algorithm to minimize error", "mimetype": "text/plain", "start_char_idx": 3539, "end_char_idx": 4629, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"d6d5794a-eea5-4d9d-ac88-379c4fb458a4": {"node_ids": ["8b07b83a-64bf-4415-b5ea-a3d7a8367430", "ae651d15-59cb-4c3a-9256-a96668355e72"], "metadata": {"file_path": "c:\\Users\\DELL\\qasystem\\notebook\\..\\Data\\MLDOC.txt", "file_name": "MLDOC.txt", "file_type": "text/plain", "file_size": 4634, "creation_date": "2025-06-22", "last_modified_date": "2025-06-22"}}}}